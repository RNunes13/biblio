
@import './../settings/screen-sizes';

/**
 * Media Queries
 * Mobile first
 */
@mixin mq($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
  }

  @if $type == max {
    $width: $width - 1px;
  }

  @media only screen and (#{$type}-width: $width) {
    @content;
  }
}

@mixin breakpoint($point, $value: 0) {
  @if $point == mobile {
    @media only screen
    and (min-width : 100px)
    and (max-width: 1080px)
    { @content; }
  }

  @else if $point == tablet {
    @media only screen
    and (min-width : 761px)
    and (max-width : 1080px)
    { @content; }
  }

  @else if $point == desktop {
    @media only screen
    and (min-width : 1081px)
    and (max-width : 5000px)
    { @content; }
  }
  @else if $point == bigdesktop {
    @media only screen
    and (min-width : 1200px)
    and (max-width : 5000px)
    { @content; }
  }

  @else if $point == notMobile {
    @media only screen
    and (min-width : 761px)
    { @content; }
  }

  @else {
    @media only screen
    and ($point: $value)
    { @content; }
  }
}

@mixin between-breakpoints($min, $max) {
  @media (min-width: $min) and (max-width: $max) {
    @content;
  }
}

/**
 * Font Weight
 */
@mixin font-weight($weight) {
  $output: $weight;

  @if map-has-key($weights, $weight) {
    $output: map-get($weights, $weight);
  }

  font-weight: $output;
}

/**
 * Common Helpers
 */
@mixin container($padding-left: 16px, $padding-right: 16px) {
  margin-left: auto;
  margin-right: auto;
  @include rem(padding-left, $padding-left);
  @include rem(padding-right, $padding-right);
  width: 100%;
  max-width: $container-width;
}

@mixin smooth-shown {
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;

  &.is--active {
    opacity: 1;
    visibility: visible;
    will-change: opacity;
  }
}

@mixin show {
  opacity: 1;
  visibility: visible;
}

@mixin hide {
  opacity: 0;
  visibility: hidden;
  height: 0;
  width: 0;
}

@mixin force-show {
  display: block !important;
}

@mixin force-hide {
  display: none !important;
}

/**
 * Clearfix: contain floats
 *
 * For modern browsers
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of elements
 *    that receive the `clearfix` class.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */
@mixin clearfix {
  &:before,
  &:after {
    content: ' '; /* 1 */
    display: table; /* 2 */
  }

  &:after {
    clear: both;
  }

  /**
   * For IE 6/7 only
   * Include this rule to trigger hasLayout and contain floats.
   */
  *zoom: 1;
}

@mixin absolute-centered {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin fixed-centered {
  position: fixed;
  top: 50%;
  left: 50%;
  -webkit-backface-visibility: hidden;
  transform: translate(-50%, -50%) translate3d(0, 0, 0);
  will-change: transform;
}

@mixin flex-centered {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin flex-spaced {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

@mixin hide-text {
  font-size: 0;
  line-height: 0;
  color: transparent;
}

@mixin reset-link {
  text-decoration: inherit;
  color: inherit;

  &:hover {
    cursor: pointer;
  }
}

@mixin reset-media {
  max-width: 100%;
  height: auto;
  -ms-interpolation-mode: bicubic;
  display: inline-block;
  vertical-align: middle;
}

@mixin reset-list {
  padding-left: 0;
  margin-top: 0;
  margin-bottom: 0;
  list-style: none;
}

@mixin reset-table {
  border-collapse: collapse;
  border-spacing: 0;
}

@mixin reset-table-cell {
  text-align: left;
  font-weight: normal;
  vertical-align: middle;
}

@mixin reset-button {
  overflow: visible; // Shrinkwrap the text in IE7-
  margin: 0;
  padding: 0;
  border: 0;
  background: transparent;
  font: inherit; // Inherit font settings (doesn’t work in IE7-)
  line-height: normal; // Override line-height to avoid spacing issues
  cursor: pointer; // Buttons don’t make the cursor change in all browsers
  -moz-user-select: text; // Make button text selectable in Gecko
}

@mixin reset-box-model {
  margin: 0;
  padding: 0;
  border: 0;
}

@mixin hidden-heading {
  font-size: 0;
  width: 1px;
  height: 1px;
  display: inline-block;
  overflow: hidden;
  position: absolute !important;
  border: 0 !important;
  padding: 0 !important;
  margin: 0 !important;
  clip: rect(1px 1px 1px 1px); // for Internet Explorer
  clip: rect(1px, 1px, 1px, 1px);
}

@mixin visually-hidden {
  position: absolute !important;
  overflow: hidden;
  clip: rect(0 0 0 0);
  height: 1px;
  width: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
}

@mixin visually-shown($position: inherit) {
  position: $position !important;
  overflow: auto;
  clip: auto;
  width: auto;
  height: auto;
  margin: 0;
}

@mixin prevent-rendering {
  filter: blur(0);
  transform: perspective(1px) translate3d(0, 0, 0);
  backface-visibility: hidden;
  -webkit-font-smoothing: subpixel-antialiased;
}

@mixin headings($from: 1, $to: 6) {
  @for $i from $from through $to {
    h#{$i} {
      @content;
    }
  }
}

@mixin hover {
  @include mq('sm') {
    &:hover {
      @content;
    }
  }
}

@mixin link-hover($color) {
  color: $color;
  text-shadow: 0 0 0 $color, 0 0 0 $color, 0 0 0 $color;
}

@mixin button-disabled {
  opacity: 0.35;
  cursor: not-allowed;
  pointer-events: none;
}

/**
 * Custom text selection style
 */
@mixin selection($color: #000, $bg-color: #b3d4fc) {
  ::selection {
    background-color: $bg-color;
    color: $color;
    text-shadow: none;
  }
}

/**
 * Custom input placeholders
 */
@mixin placeholder($color, $opacity) {
  &::-webkit-input-placeholder { /* Chrome/Opera/Safari */
    color: $color;
    opacity: $opacity;
  }

  &::-moz-placeholder { /* Firefox 19+ */
    color: $color;
    opacity: $opacity;
  }

  &:-ms-input-placeholder { /* IE 10+ */
    color: $color;
    opacity: $opacity;
  }

  &:-moz-placeholder { /* Firefox 18- */
    color: $color;
    opacity: $opacity;
  }
}

/**
 * Custom default browser scrollbar
 */
@mixin scrollbar($size, $primary, $secondary: lighten($primary, 25%)) {
  &::-webkit-scrollbar {
    width: $size;
    height: $size;
  }

  &::-webkit-scrollbar-thumb {
    @include rem(border-radius, 10px);
    background: rgba($primary, 0.3);

    &:hover {
      background: $primary;
    }
  }

  &::-webkit-scrollbar-track {
    background: $secondary;
  }

  // For Internet Explorer
  body & {
    scrollbar-face-color: $primary;
    scrollbar-track-color: $secondary;
  }
}

/**
 * Generate arrow on a pseudo-element
 * To set color, use 'border-color' inside a class
 *
 * @param  {string} $position:     up              Arrow position (up, right, bottom, left)
 * @param  {string} $arrow-width:  20px             Arrow Width
 * @param  {string} $arrow-size:   $arrow-width/4   Arrow size
 *
 * @return A CSS Arrow
 */
@mixin arrow-generate($position: 'up', $arrow-width: 20px, $arrow-size: $arrow-width / 4) {
  $pos: -45deg;

  @if ( $position == 'up' ) {
    $pos: $pos;
  }

  @else if ( $position == 'right' ) {
    $pos: 45deg;
  }

  @else if ( $position == 'down' ) {
    $pos: 135deg;
  }

  @else if ( $position == 'left' ) {
    $pos: -135deg;
  }

  @else { /* */ }

  content: '';
  display: inline-block;
  width: $arrow-width;
  height: $arrow-width;
  border-top: $arrow-size solid #333;
  border-right: $arrow-size solid #333;
  transform: rotate($pos);
}

/**
 * @include triangle within a pseudo element and add positioning properties (ie. top, left)
 * $direction: up, down, left, right
 */
@mixin triangle($direction, $size: 6px, $color: #222) {
  content: '';
  display: block;
  position: absolute;
  height: 0;
  width: 0;

  @if ( $direction == 'up' ) {
    border-bottom: $size solid $color;
    border-left: 1/2*$size solid transparent;
    border-right: 1/2*$size solid transparent;
  }

  @else if ( $direction == 'down' ) {
    border-top: $size solid $color;
    border-left: 1/2*$size solid transparent;
    border-right: 1/2*$size solid transparent;
  }

  @else if ( $direction == 'left' ) {
    border-top: 1/2*$size solid transparent;
    border-bottom: 1/2*$size solid transparent;
    border-right: $size solid $color;
  }

  @else if ( $direction == 'right' ) {
    border-top: 1/2*$size solid transparent;
    border-bottom: 1/2*$size solid transparent;
    border-left: $size solid $color;
  }
}

@mixin tooltip($content: attr(data-tooltip), $direction: top, $z-index: 99) {
  position: relative;

  &::before,
  &::after {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    z-index: $z-index;
    transition-property: opacity, visibility, transform;
    transition-duration: 200ms;
    transition-timing-function: $accelerate-ease;
  }

  &::before {
    opacity: 0;
    visibility: hidden;

    @if ( $direction == 'top' ) {
      @include triangle(down, 6px, #222);
      @include rem(top, -10px);
    }

    @else {
      @include triangle(up, 6px, #222);
      @include rem(bottom, -10px);
    }
  }

  &::after {
    content: $content;
    @include flex-centered();
    @include rem(padding, 5px 10px);
    @include rem(height, 40px);
    @include rem(font-size, 14px);
    @include rem(border-radius, 5px);
    @include font-weight(semi-bold);
    white-space: nowrap;
    color: $color-white;
    background-color: $color-charcoal;
    opacity: 0;
    visibility: hidden;

    @if ( $direction == 'top' ) {
      @include rem(top, -50px);
    }

    @else {
      @include rem(bottom, -50px);
    }
  }

  &:hover {
    &::after,
    &::before {
      opacity: 1;
      visibility: visible;
    }
  }
}

@mixin ellipsis {
  // Create ellipsis
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin hover-supported {    
  @media not all and (pointer: coarse) {
    &:hover {
      @content;
    }
  }
}
