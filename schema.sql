-- MySQL Script generated by MySQL Workbench
-- s√°b 26 out 2019 10:29:36 -03
-- Model: Biblio    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- Activating the event scheduler
SET GLOBAL event_scheduler = 1;

-- -----------------------------------------------------
-- Schema biblio
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `biblio` DEFAULT CHARACTER SET utf8 ;
USE `biblio` ;

-- -----------------------------------------------------
-- Table `biblio`.`role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `biblio`.`role` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(60) NOT NULL,
  `description` VARCHAR(100) NULL,
  `created_at` DATETIME NOT NULL DEFAULT now(),
  `updated_at` DATETIME NOT NULL DEFAULT now() ON UPDATE now(),
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `biblio`.`user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `biblio`.`user` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  `username` VARCHAR(100) NOT NULL,
  `email` VARCHAR(200) NOT NULL,
  `password` VARCHAR(100) NOT NULL,
  `cpf` VARCHAR(11) NOT NULL,
  `rg` VARCHAR(9) NOT NULL,
  `role_id` INT NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT now(),
  `updated_at` DATETIME NOT NULL DEFAULT now() ON UPDATE now(),
  `deleted` TINYINT NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE,
  INDEX `fk_role_idx` (`role_id` ASC) VISIBLE,
  UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE,
  CONSTRAINT `fk_role`
    FOREIGN KEY (`role_id`)
    REFERENCES `biblio`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `biblio`.`user_phone`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `biblio`.`user_phone` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `ddd` INT(3) NOT NULL,
  `number` VARCHAR(45) NOT NULL,
  `user_id` INT NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT now(),
  `updated_at` DATETIME NOT NULL DEFAULT now() ON UPDATE now(),
  INDEX `fk_user_idx` (`user_id` ASC) VISIBLE,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_user_phone`
    FOREIGN KEY (`user_id`)
    REFERENCES `biblio`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `biblio`.`user_address`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `biblio`.`user_address` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `zip_code` VARCHAR(8) NOT NULL,
  `street` VARCHAR(255) NOT NULL,
  `number` VARCHAR(20) NOT NULL,
  `additional` LONGTEXT NULL,
  `neighborhood` VARCHAR(200) NOT NULL,
  `city` VARCHAR(200) NOT NULL,
  `uf` VARCHAR(2) NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT now(),
  `updated_at` DATETIME NOT NULL DEFAULT now() ON UPDATE now(),
  PRIMARY KEY (`id`),
  INDEX `fk_user_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_address`
    FOREIGN KEY (`user_id`)
    REFERENCES `biblio`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `biblio`.`publishing_company`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `biblio`.`publishing_company` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT now(),
  `updated_at` DATETIME NOT NULL DEFAULT now() ON UPDATE now(),
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `biblio`.`book`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `biblio`.`book` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(200) NOT NULL,
  `author` VARCHAR(255) NOT NULL,
  `genre` VARCHAR(100) NULL,
  `edition` VARCHAR(20) NULL,
  `release_year` VARCHAR(4) NULL,
  `isbn` VARCHAR(13) NOT NULL,
  `active` TINYINT NOT NULL DEFAULT 1,
  `internal_identification` VARCHAR(100),
  `number_pages` INT NULL,
  `quantity` INT NOT NULL DEFAULT 0,
  `publishing_company_id` INT NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT now(),
  `updated_at` DATETIME NOT NULL DEFAULT now() ON UPDATE now(),
  PRIMARY KEY (`id`),
  INDEX `fk_publishing_company_idx` (`publishing_company_id` ASC) VISIBLE,
  UNIQUE INDEX `isbn_UNIQUE` (`isbn` ASC) VISIBLE,
  CONSTRAINT `fk_publishing_company`
    FOREIGN KEY (`publishing_company_id`)
    REFERENCES `biblio`.`publishing_company` (`id`)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `biblio`.`book_loan`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `biblio`.`book_loan` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `book_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `loan_date` DATETIME NOT NULL DEFAULT now(),
  `return_date` DATETIME NULL,
  `status` VARCHAR(60) NOT NULL DEFAULT 'active',
  `updated_at` DATETIME NOT NULL DEFAULT now() ON UPDATE now(),
  PRIMARY KEY (`id`),
  INDEX `fk_book_idx` (`book_id` ASC) VISIBLE,
  INDEX `fk_user_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_book`
    FOREIGN KEY (`book_id`)
    REFERENCES `biblio`.`book` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `biblio`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `biblio`.`booking_history`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `biblio`.`booking_history` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `book_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `reservation_date` DATETIME NOT NULL DEFAULT now(),
  `status` VARCHAR(60) NOT NULL DEFAULT 'waiting',
  `updated_at` DATETIME NOT NULL DEFAULT now() ON UPDATE now(),
  PRIMARY KEY (`id`),
  INDEX `fk_book_id_idx` (`book_id` ASC) VISIBLE,
  INDEX `fk_user_id_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_book_id`
    FOREIGN KEY (`book_id`)
    REFERENCES `biblio`.`book` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `biblio`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `biblio`.`setting`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `biblio`.`setting` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `loan_days` INT NOT NULL DEFAULT 15,
  `collection_days` INT NOT NULL DEFAULT 5,
  `created_at` DATETIME NOT NULL DEFAULT now(),
  `updated_at` DATETIME NOT NULL DEFAULT now() ON UPDATE now(),
  PRIMARY KEY (`id`)
) ENGINE = InnoDB;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- -----------------------------------------------------
-- Adding Indexes
-- -----------------------------------------------------

-- User
CREATE INDEX idx_user_id ON user(`id`);
CREATE INDEX idx_user_email ON user(`email`);
CREATE INDEX idx_user_deleted ON user(`deleted`);
CREATE INDEX idx_user_username ON user(`username`);
CREATE INDEX idx_user_created_at ON user(`created_at`);

-- Publishing company
CREATE INDEX idx_publishing_company_name ON publishing_company(`name`);
CREATE INDEX idx_publishing_company_created_at ON publishing_company(`created_at`);

-- Book
CREATE INDEX idx_book_id ON book(`id`);
CREATE INDEX idx_book_title ON book(`title`);
CREATE INDEX idx_book_author ON book(`author`);
CREATE INDEX idx_book_genre ON book(`genre`);
CREATE INDEX idx_book_active ON book(`active`);
CREATE INDEX idx_book_created_at ON book(`created_at`);

-- Book loan
CREATE INDEX idx_book_loan_id ON book_loan(`id`);
CREATE INDEX idx_book_loan_date ON book_loan(`loan_date`);
CREATE INDEX idx_book_loan_status ON book_loan(`status`);

-- Booking history
CREATE INDEX idx_bookinf_history_id ON booking_history(`id`);
CREATE INDEX idx_bookinf_history_status ON booking_history(`status`);
CREATE INDEX idx_bookinf_history_date ON booking_history(`reservation_date`);


-- -----------------------------------------------------
-- Seeding data
-- -----------------------------------------------------

-- User role
INSERT INTO `biblio`.`role` (`id`, `name`, `description`) VALUES (1, 'admin', 'Access level for system administrators');
INSERT INTO `biblio`.`role` (`id`, `name`, `description`) VALUES (2, 'librarian', 'Access level for system librarians');
INSERT INTO `biblio`.`role` (`id`, `name`, `description`) VALUES (3, 'customer_service', 'Access level for customer service');
INSERT INTO `biblio`.`role` (`id`, `name`, `description`) VALUES (4, 'public', 'Access level for the public and users');

-- User
-- Password '22e600615d4bd67e34108027eb6b452b' is a MD5 of '123Mudar'
INSERT INTO `biblio`.`user` (`id`, `name`, `username`, `email`, `password`, `cpf`, `rg`, `role_id`) VALUES (1, 'Administrator', 'admin', 'admin@biblio.com', '22e600615d4bd67e34108027eb6b452b', '45665214000', '478442051', 1);
INSERT INTO `biblio`.`user` (`id`, `name`, `username`, `email`, `password`, `cpf`, `rg`, `role_id`) VALUES (2, 'Shirley Meyers', 'Enbraing38', 'ShirleyTMeyers@rhyta.com', '22e600615d4bd67e34108027eb6b452b', '78705858828', '247928203', 2);
INSERT INTO `biblio`.`user` (`id`, `name`, `username`, `email`, `password`, `cpf`, `rg`, `role_id`) VALUES (3, 'Norma Kuhns', 'Parawascrack', 'NormaCKuhns@armyspy.com', '22e600615d4bd67e34108027eb6b452b', '59038388047', '361456001', 3);
INSERT INTO `biblio`.`user` (`id`, `name`, `username`, `email`, `password`, `cpf`, `rg`, `role_id`) VALUES (4, 'Juana Burns', 'Misficear', 'JuanaJBurns@teleworm.us', '22e600615d4bd67e34108027eb6b452b', '02087000050', '445602077', 4);
INSERT INTO `biblio`.`user` (`id`, `name`, `username`, `email`, `password`, `cpf`, `rg`, `role_id`) VALUES (5, 'Mike Faucher', 'Allecte', 'MikeNFaucher@teleworm.us', '22e600615d4bd67e34108027eb6b452b', '39693752074', '205820396', 4);

-- User address
INSERT INTO `biblio`.`user_address` (`user_id`, `zip_code`, `street`, `number`, `neighborhood`, `city`, `uf`) VALUES (4, '00000000', 'Rua Um', 123, 'Centro', 'S√£o Paulo', 'SP');

-- User phone
INSERT INTO `biblio`.`user_phone` (`ddd`, `number`, `user_id`) VALUES (11, '12345678', 4);

-- Setting
INSERT INTO `biblio`.`setting` (`loan_days`, `collection_days`) VALUES (15, 5);

-- Publishing company
INSERT INTO `biblio`.`publishing_company` (`id`, `name`) VALUES (1, 'L&PM');
INSERT INTO `biblio`.`publishing_company` (`id`, `name`) VALUES (2, 'Gente');
INSERT INTO `biblio`.`publishing_company` (`id`, `name`) VALUES (3, 'rocco');
INSERT INTO `biblio`.`publishing_company` (`id`, `name`) VALUES (4, 'Harpercollins');

-- Book
INSERT INTO `biblio`.`book` (`id`, `title`, `author`, `genre`, `release_year`, `isbn`, `number_pages`, `quantity`, `publishing_company_id`) VALUES (1, 'Ideias para futuramente n√£o ficar no passado', 'Guilherme Machado', 'Autoajuda', '2019', '9788545203735', 208, 10, 2);
INSERT INTO `biblio`.`book` (`id`, `title`, `author`, `genre`, `release_year`, `isbn`, `number_pages`, `quantity`, `publishing_company_id`) VALUES (2, 'Do Mil Ao Milh√£o', 'Thiago Nigro', 'Neg√≥cios', '2018', '9788595083271', 192, 7, 4);
INSERT INTO `biblio`.`book` (`id`, `title`, `author`, `genre`, `release_year`, `isbn`, `number_pages`, `quantity`, `publishing_company_id`) VALUES (3, 'O poder da autorresponsabilidade', 'Paulo Vieira', 'Neg√≥cios', '2018', '9788545202219', 96, 23, 2);
INSERT INTO `biblio`.`book` (`id`, `title`, `author`, `genre`, `release_year`, `isbn`, `number_pages`, `quantity`, `publishing_company_id`) VALUES (4, 'Sapiens - Uma Breve Hist√≥ria da Humanidade', 'Yuval Noah Harari', 'N√£o-fic√ß√£o', '2014', '9788525432186', 464, 3, 1);
INSERT INTO `biblio`.`book` (`id`, `title`, `author`, `genre`, `release_year`, `isbn`, `number_pages`, `quantity`, `publishing_company_id`) VALUES (5, 'Mulheres Que Correm Com Os Lobos', 'Clarissa Pinkola Est√©s', 'N√£o-fic√ß√£o', '1992', '9788532529787', 576, 2, 3);

-- Booking history
INSERT INTO `biblio`.`booking_history` (`book_id`, `user_id`, `reservation_date`, `status`, `updated_at`) VALUES (2, 5, CONVERT('2019-02-04 12:28:34', DATETIME), 'completed', CONVERT('2019-02-05 14:17:23', DATETIME));
INSERT INTO `biblio`.`booking_history` (`book_id`, `user_id`, `reservation_date`, `status`, `updated_at`) VALUES (5, 4, CONVERT('2019-03-13 20:54:29', DATETIME), 'canceled', CONVERT('2019-03-16 20:54:30', DATETIME));
INSERT INTO `biblio`.`booking_history` (`book_id`, `user_id`) VALUES (1, 5);

-- Book loan
INSERT INTO `biblio`.`book_loan` (`book_id`, `user_id`, `loan_date`, `return_date`, `status`, `updated_at`) VALUES (2, 5, CONVERT('2019-02-05 14:17:23', DATETIME), CONVERT('2019-02-18 15:43:48', DATETIME), 'finished', CONVERT('2019-02-18 15:43:48', DATETIME));


DELIMITER |

-- -----------------------------------------------------
-- Event for cancellation of reservations that exceed the defined collection days
-- -----------------------------------------------------
CREATE EVENT `cancel_reservations` 
	ON SCHEDULE EVERY 1 DAY STARTS (TIMESTAMP(CURRENT_DATE) + INTERVAL 1 DAY) DO
  BEGIN
		/*
      The collection period is on calendar days, so weekends and holidays are counted.
      This validation would be a future improvement.
    */
    DECLARE collectionDays INT;

    SELECT collection_days INTO collectionDays FROM setting;

	  UPDATE `biblio`.`booking_history`
    SET status = 'canceled', updated_at = now()
    WHERE
      ADDDATE(reservation_date, INTERVAL collectionDays DAY) < now() AND
      status = 'waiting';
	END |

-- -----------------------------------------------------
-- Trigger actions before creating a reservation
-- -----------------------------------------------------
CREATE TRIGGER before_booking_history_insert BEFORE INSERT ON `biblio`.`booking_history`
  FOR EACH ROW BEGIN
    -- Checking stock quantity
    DECLARE bookQuantity INT;

    SELECT quantity INTO bookQuantity FROM `biblio`.`book` WHERE id = NEW.book_id;

    IF (bookQuantity < 1) THEN
      SIGNAL sqlstate '45000' set message_text = 'BookingHistoryInsertError - Desired book is out of stock.';
    ELSE
      UPDATE `biblio`.`book` SET quantity = quantity - 1 WHERE id = NEW.book_id;
    END IF;
  END |

-- -----------------------------------------------------
-- Trigger actions after updating a reservation
-- -----------------------------------------------------
CREATE TRIGGER after_booking_history_update AFTER UPDATE ON `biblio`.`booking_history`
  FOR EACH ROW BEGIN
    -- Creating a loan when the reservation has been completed
    IF (OLD.status = 'waiting' AND NEW.status = 'completed') THEN
      UPDATE `biblio`.`book` SET quantity = quantity + 1 WHERE id = NEW.book_id;
      INSERT INTO `biblio`.`book_loan` (`book_id`, `user_id`) VALUES (NEW.book_id, NEW.user_id);
    END IF;

    -- Increase book quantity if reservation was canceled
    IF (OLD.status != 'canceled' AND NEW.status = 'canceled') THEN
      UPDATE `biblio`.`book` SET quantity = quantity + 1 WHERE id = NEW.book_id;
    END IF;
  END |

-- -----------------------------------------------------
-- Trigger an actions before creating a loan
-- -----------------------------------------------------
CREATE TRIGGER before_book_loan_insert BEFORE INSERT ON `biblio`.`book_loan`
  FOR EACH ROW BEGIN
    -- Checking stock quantity
    DECLARE bookQuantity INT;

    SELECT quantity INTO bookQuantity FROM `biblio`.`book` WHERE id = NEW.book_id;

    IF (bookQuantity < 1) THEN
      SIGNAL sqlstate '45000' set message_text = 'BookLoanInsertError - Desired book is out of stock.';
    ELSE
      UPDATE `biblio`.`book` SET quantity = quantity - 1 WHERE id = NEW.book_id;
    END IF;
  END |

-- -----------------------------------------------------
-- Trigger actions before updating a loan
-- -----------------------------------------------------
CREATE TRIGGER before_book_loan_update BEFORE UPDATE ON `biblio`.`book_loan`
  FOR EACH ROW BEGIN
    -- Set the return date when finalizing the loan
    IF (OLD.status = 'active' AND NEW.status = 'finished') THEN
      SET NEW.return_date = now();
    END IF;
  END |

-- -----------------------------------------------------
-- Trigger actions after updating a loan
-- -----------------------------------------------------
CREATE TRIGGER after_book_loan_update AFTER UPDATE ON `biblio`.`book_loan`
  FOR EACH ROW BEGIN
    -- Increasing book quantity after finishing loan
    IF (OLD.status = 'active' AND NEW.status = 'finished') THEN
      UPDATE `biblio`.`book` SET quantity = quantity + 1 WHERE id = NEW.book_id;
    END IF;
  END |

DELIMITER ;
